name: Docker CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        id: build-image
        run: |
          docker build -t devops-ninja .
          echo "IMAGE_ID=devops-ninja" >> $GITHUB_ENV

      - name: Setup Trivy
        run: |
          # Installation de Trivy avec cache persistant
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | \
            sh -s -- -b /usr/local/bin v0.50.1  # Version spécifique stable
          mkdir -p ~/.cache/trivy
          trivy --cache-dir ~/.cache/trivy --version

      - name: Download Trivy DB
        run: |
          trivy --cache-dir ~/.cache/trivy image --download-db-only --skip-java-db-update

      - name: Scan image for vulnerabilities
        id: trivy-scan
        continue-on-error: true  # Permet de continuer malgré les vulnérabilités
        run: |
          # Analyse avec sortie détaillée
          trivy --cache-dir ~/.cache/trivy image \
            --scanners vuln \
            --format template \
            --template "@contrib/sarif.tpl" \
            --output trivy-results.sarif \
            --severity HIGH,CRITICAL \
            --ignore-unfixed \
            ${{ env.IMAGE_ID }}

          # Analyse conditionnelle des résultats
          if [ -s trivy-results.sarif ]; then
            echo "VULNERABILITIES_FOUND=true" >> $GITHUB_ENV
            echo "::warning::Vulnerabilities detected - see report"
          fi

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-results.sarif

      - name: Push Docker image
        if: env.VULNERABILITIES_FOUND != 'true'
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker tag ${{ env.IMAGE_ID }} ghcr.io/matuidi1234/devops-ninja:latest
          docker push ghcr.io/matuidi1234/devops-ninja:latest

      - name: Fail workflow if critical vulnerabilities
        if: env.VULNERABILITIES_FOUND == 'true'
        run: |
          echo "::error::Critical vulnerabilities detected - blocking image push"
          exit 1